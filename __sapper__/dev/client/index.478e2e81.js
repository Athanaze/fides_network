import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as compute_rest_props, v as validate_slots, a as assign, e as exclude_internal_props, b as empty, f as insert_hydration_dev, n as noop, g as detach_dev, h as bubble, j as element, k as claim_element, l as children, m as set_attributes, t as toggle_class, o as add_location, p as listen_dev, q as get_spread_update, r as run_all, u as text, w as claim_text, x as append_hydration_dev, y as compute_slots, z as getContext, A as group_outros, B as transition_out, C as check_outros, D as transition_in, E as binding_callbacks, F as create_slot, G as set_data_dev, H as space, I as create_component, J as claim_space, K as claim_component, L as mount_component, M as update_slot_base, N as get_all_dirty_from_scope, O as get_slot_changes, P as destroy_component, Q as get_spread_object, R as onMount, T as attr_dev } from './client.b97e0535.js';

/* node_modules/carbon-components-svelte/src/Button/ButtonSkeleton.svelte generated by Svelte v3.47.0 */

const file$2 = "node_modules/carbon-components-svelte/src/Button/ButtonSkeleton.svelte";

// (35:0) {:else}
function create_else_block$1(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(div, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
			add_location(div, file$2, 35, 2, 801);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(div, "click", /*click_handler_1*/ ctx[7], false, false, false),
					listen_dev(div, "mouseover", /*mouseover_handler_1*/ ctx[8], false, false, false),
					listen_dev(div, "mouseenter", /*mouseenter_handler_1*/ ctx[9], false, false, false),
					listen_dev(div, "mouseleave", /*mouseleave_handler_1*/ ctx[10], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(div, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(35:0) {:else}",
		ctx
	});

	return block;
}

// (16:0) {#if href}
function create_if_block$1(ctx) {
	let a;
	let t_value = "" + "";
	let t;
	let a_rel_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		{ role: "button" },
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, rel: true, role: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(a, a_data);
			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(a, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(a, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
			add_location(a, file$2, 16, 2, 337);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, a, anchor);
			append_hydration_dev(a, t);

			if (!mounted) {
				dispose = [
					listen_dev(a, "click", /*click_handler*/ ctx[3], false, false, false),
					listen_dev(a, "mouseover", /*mouseover_handler*/ ctx[4], false, false, false),
					listen_dev(a, "mouseenter", /*mouseenter_handler*/ ctx[5], false, false, false),
					listen_dev(a, "mouseleave", /*mouseleave_handler*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*href*/ 1 && { href: /*href*/ ctx[0] },
				dirty & /*$$restProps*/ 4 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
				? 'noopener noreferrer'
				: undefined) && { rel: a_rel_value },
				{ role: "button" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(a, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(a, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(16:0) {#if href}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return create_if_block$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_hydration_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ButtonSkeleton', slots, []);
	let { href = undefined } = $$props;
	let { size = "default" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
	};

	$$self.$capture_state = () => ({ href, size });

	$$self.$inject_state = $$new_props => {
		if ('href' in $$props) $$invalidate(0, href = $$new_props.href);
		if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		href,
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class ButtonSkeleton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { href: 0, size: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ButtonSkeleton",
			options,
			id: create_fragment$2.name
		});
	}

	get href() {
		throw new Error("<ButtonSkeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<ButtonSkeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<ButtonSkeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<ButtonSkeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var ButtonSkeleton$1 = ButtonSkeleton;

/* node_modules/carbon-components-svelte/src/Button/Button.svelte generated by Svelte v3.47.0 */
const file$1 = "node_modules/carbon-components-svelte/src/Button/Button.svelte";
const get_default_slot_changes = dirty => ({ props: dirty[0] & /*buttonProps*/ 512 });
const get_default_slot_context = ctx => ({ props: /*buttonProps*/ ctx[9] });

// (163:0) {:else}
function create_else_block(ctx) {
	let button;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[8] && create_if_block_4(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[3]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [/*buttonProps*/ ctx[9]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block = {
		c: function create() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			if (if_block) if_block.l(button_nodes);
			t = claim_space(button_nodes);
			if (default_slot) default_slot.l(button_nodes);
			if (switch_instance) claim_component(switch_instance.$$.fragment, button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(button, button_data);
			add_location(button, file$1, 163, 2, 4429);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append_hydration_dev(button, t);

			if (default_slot) {
				default_slot.m(button, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[33](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler_2*/ ctx[24], false, false, false),
					listen_dev(button, "mouseover", /*mouseover_handler_2*/ ctx[25], false, false, false),
					listen_dev(button, "mouseenter", /*mouseenter_handler_2*/ ctx[26], false, false, false),
					listen_dev(button, "mouseleave", /*mouseleave_handler_2*/ ctx[27], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 8) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[3];

			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[33](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(163:0) {:else}",
		ctx
	});

	return block;
}

// (143:28) 
function create_if_block_2(ctx) {
	let a;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[8] && create_if_block_3(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[3]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let a_levels = [/*buttonProps*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {});
			var a_nodes = children(a);
			if (if_block) if_block.l(a_nodes);
			t = claim_space(a_nodes);
			if (default_slot) default_slot.l(a_nodes);
			if (switch_instance) claim_component(switch_instance.$$.fragment, a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(a, a_data);
			add_location(a, file$1, 144, 2, 4046);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, a, anchor);
			if (if_block) if_block.m(a, null);
			append_hydration_dev(a, t);

			if (default_slot) {
				default_slot.m(a, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, a, null);
			}

			/*a_binding*/ ctx[32](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a, "click", /*click_handler_1*/ ctx[20], false, false, false),
					listen_dev(a, "mouseover", /*mouseover_handler_1*/ ctx[21], false, false, false),
					listen_dev(a, "mouseenter", /*mouseenter_handler_1*/ ctx[22], false, false, false),
					listen_dev(a, "mouseleave", /*mouseleave_handler_1*/ ctx[23], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(a, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 8) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[3];

			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, a, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*a_binding*/ ctx[32](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(143:28) ",
		ctx
	});

	return block;
}

// (141:13) 
function create_if_block_1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope, buttonProps*/ 262656)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(141:13) ",
		ctx
	});

	return block;
}

// (130:0) {#if skeleton}
function create_if_block(ctx) {
	let buttonskeleton;
	let current;

	const buttonskeleton_spread_levels = [
		{ href: /*href*/ ctx[7] },
		{ size: /*size*/ ctx[1] },
		/*$$restProps*/ ctx[10],
		{
			style: /*hasIconOnly*/ ctx[8] && 'width: 3rem;'
		}
	];

	let buttonskeleton_props = {};

	for (let i = 0; i < buttonskeleton_spread_levels.length; i += 1) {
		buttonskeleton_props = assign(buttonskeleton_props, buttonskeleton_spread_levels[i]);
	}

	buttonskeleton = new ButtonSkeleton$1({
			props: buttonskeleton_props,
			$$inline: true
		});

	buttonskeleton.$on("click", /*click_handler*/ ctx[28]);
	buttonskeleton.$on("mouseover", /*mouseover_handler*/ ctx[29]);
	buttonskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[30]);
	buttonskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[31]);

	const block = {
		c: function create() {
			create_component(buttonskeleton.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(buttonskeleton.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(buttonskeleton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const buttonskeleton_changes = (dirty[0] & /*href, size, $$restProps, hasIconOnly*/ 1410)
			? get_spread_update(buttonskeleton_spread_levels, [
					dirty[0] & /*href*/ 128 && { href: /*href*/ ctx[7] },
					dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] },
					dirty[0] & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10]),
					dirty[0] & /*hasIconOnly*/ 256 && {
						style: /*hasIconOnly*/ ctx[8] && 'width: 3rem;'
					}
				])
			: {};

			buttonskeleton.$set(buttonskeleton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(buttonskeleton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(130:0) {#if skeleton}",
		ctx
	});

	return block;
}

// (172:4) {#if hasIconOnly}
function create_if_block_4(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*iconDescription*/ ctx[3]);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(span, "bx--assistive-text", true);
			add_location(span, file$1, 172, 6, 4578);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, span, anchor);
			append_hydration_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 8) set_data_dev(t, /*iconDescription*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(172:4) {#if hasIconOnly}",
		ctx
	});

	return block;
}

// (153:4) {#if hasIconOnly}
function create_if_block_3(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*iconDescription*/ ctx[3]);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(span, "bx--assistive-text", true);
			add_location(span, file$1, 153, 6, 4190);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, span, anchor);
			append_hydration_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 8) set_data_dev(t, /*iconDescription*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(153:4) {#if hasIconOnly}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[5]) return 0;
		if (/*as*/ ctx[4]) return 1;
		if (/*href*/ ctx[7] && !/*disabled*/ ctx[6]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let hasIconOnly;
	let buttonProps;

	const omit_props_names = [
		"kind","size","expressive","isSelected","icon","iconDescription","tooltipAlignment","tooltipPosition","as","skeleton","disabled","href","tabindex","type","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Button', slots, ['default']);
	const $$slots = compute_slots(slots);
	let { kind = "primary" } = $$props;
	let { size = "default" } = $$props;
	let { expressive = false } = $$props;
	let { isSelected = false } = $$props;
	let { icon = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { tooltipAlignment = "center" } = $$props;
	let { tooltipPosition = "bottom" } = $$props;
	let { as = false } = $$props;
	let { skeleton = false } = $$props;
	let { disabled = false } = $$props;
	let { href = undefined } = $$props;
	let { tabindex = "0" } = $$props;
	let { type = "button" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ComposedModal");

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(11, kind = $$new_props.kind);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('expressive' in $$new_props) $$invalidate(12, expressive = $$new_props.expressive);
		if ('isSelected' in $$new_props) $$invalidate(13, isSelected = $$new_props.isSelected);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('iconDescription' in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ('tooltipAlignment' in $$new_props) $$invalidate(14, tooltipAlignment = $$new_props.tooltipAlignment);
		if ('tooltipPosition' in $$new_props) $$invalidate(15, tooltipPosition = $$new_props.tooltipPosition);
		if ('as' in $$new_props) $$invalidate(4, as = $$new_props.as);
		if ('skeleton' in $$new_props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ('disabled' in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ('href' in $$new_props) $$invalidate(7, href = $$new_props.href);
		if ('tabindex' in $$new_props) $$invalidate(16, tabindex = $$new_props.tabindex);
		if ('type' in $$new_props) $$invalidate(17, type = $$new_props.type);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		kind,
		size,
		expressive,
		isSelected,
		icon,
		iconDescription,
		tooltipAlignment,
		tooltipPosition,
		as,
		skeleton,
		disabled,
		href,
		tabindex,
		type,
		ref,
		getContext,
		ButtonSkeleton: ButtonSkeleton$1,
		ctx,
		hasIconOnly,
		buttonProps
	});

	$$self.$inject_state = $$new_props => {
		if ('kind' in $$props) $$invalidate(11, kind = $$new_props.kind);
		if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		if ('expressive' in $$props) $$invalidate(12, expressive = $$new_props.expressive);
		if ('isSelected' in $$props) $$invalidate(13, isSelected = $$new_props.isSelected);
		if ('icon' in $$props) $$invalidate(2, icon = $$new_props.icon);
		if ('iconDescription' in $$props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ('tooltipAlignment' in $$props) $$invalidate(14, tooltipAlignment = $$new_props.tooltipAlignment);
		if ('tooltipPosition' in $$props) $$invalidate(15, tooltipPosition = $$new_props.tooltipPosition);
		if ('as' in $$props) $$invalidate(4, as = $$new_props.as);
		if ('skeleton' in $$props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ('disabled' in $$props) $$invalidate(6, disabled = $$new_props.disabled);
		if ('href' in $$props) $$invalidate(7, href = $$new_props.href);
		if ('tabindex' in $$props) $$invalidate(16, tabindex = $$new_props.tabindex);
		if ('type' in $$props) $$invalidate(17, type = $$new_props.type);
		if ('ref' in $$props) $$invalidate(0, ref = $$new_props.ref);
		if ('hasIconOnly' in $$props) $$invalidate(8, hasIconOnly = $$new_props.hasIconOnly);
		if ('buttonProps' in $$props) $$invalidate(9, buttonProps = $$new_props.buttonProps);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*ref*/ 1) {
			if (ctx && ref) {
				ctx.declareRef(ref);
			}
		}

		if ($$self.$$.dirty[0] & /*icon*/ 4) {
			$$invalidate(8, hasIconOnly = icon && !$$slots.default);
		}

		$$invalidate(9, buttonProps = {
			type: href && !disabled ? undefined : type,
			tabindex,
			disabled: disabled === true ? true : undefined,
			href,
			"aria-pressed": hasIconOnly && kind === "ghost" && !href
			? isSelected
			: undefined,
			...$$restProps,
			class: [
				"bx--btn",
				expressive && "bx--btn--expressive",
				(size === "small" && !expressive || size === "sm" && !expressive || size === "small" && !expressive) && "bx--btn--sm",
				size === "field" && !expressive || size === "md" && !expressive && "bx--btn--md",
				size === "field" && "bx--btn--field",
				size === "small" && "bx--btn--sm",
				size === "lg" && "bx--btn--lg",
				size === "xl" && "bx--btn--xl",
				kind && `bx--btn--${kind}`,
				disabled && "bx--btn--disabled",
				hasIconOnly && "bx--btn--icon-only",
				hasIconOnly && "bx--tooltip__trigger",
				hasIconOnly && "bx--tooltip--a11y",
				hasIconOnly && tooltipPosition && `bx--btn--icon-only--${tooltipPosition}`,
				hasIconOnly && tooltipAlignment && `bx--tooltip--align-${tooltipAlignment}`,
				hasIconOnly && isSelected && kind === "ghost" && "bx--btn--selected",
				$$restProps.class
			].filter(Boolean).join(" ")
		});
	};

	return [
		ref,
		size,
		icon,
		iconDescription,
		as,
		skeleton,
		disabled,
		href,
		hasIconOnly,
		buttonProps,
		$$restProps,
		kind,
		expressive,
		isSelected,
		tooltipAlignment,
		tooltipPosition,
		tabindex,
		type,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		button_binding
	];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				kind: 11,
				size: 1,
				expressive: 12,
				isSelected: 13,
				icon: 2,
				iconDescription: 3,
				tooltipAlignment: 14,
				tooltipPosition: 15,
				as: 4,
				skeleton: 5,
				disabled: 6,
				href: 7,
				tabindex: 16,
				type: 17,
				ref: 0
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment$1.name
		});
	}

	get kind() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set kind(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expressive() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expressive(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isSelected() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSelected(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconDescription() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconDescription(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltipAlignment() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltipAlignment(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltipPosition() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltipPosition(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get as() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set as(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get skeleton() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set skeleton(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Button$1 = Button;

/* src/routes/index.svelte generated by Svelte v3.47.0 */
const file = "src/routes/index.svelte";

// (89:0) <Button>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Primary button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Primary button");
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(89:0) <Button>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div0;
	let h1;
	let t0;
	let t1;
	let h3;
	let t2;
	let br;
	let t3;
	let t4;
	let div1;
	let h2;
	let t5;
	let span;
	let t6;
	let button;
	let current;

	button = new Button$1({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			h1 = element("h1");
			t0 = text("Fides");
			t1 = space();
			h3 = element("h3");
			t2 = text("Experimental multi party ");
			br = element("br");
			t3 = text(" hosting solution");
			t4 = space();
			div1 = element("div");
			h2 = element("h2");
			t5 = text("Making dapps more");
			span = element("span");
			t6 = space();
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { id: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Fides");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, "Experimental multi party ");
			br = claim_element(h3_nodes, "BR", {});
			t3 = claim_text(h3_nodes, " hosting solution");
			h3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { id: true });
			var div1_nodes = children(div1);
			h2 = claim_element(div1_nodes, "H2", {});
			var h2_nodes = children(h2);
			t5 = claim_text(h2_nodes, "Making dapps more");
			h2_nodes.forEach(detach_dev);

			span = claim_element(div1_nodes, "SPAN", {
				class: true,
				"data-period": true,
				"data-rotate": true
			});

			children(span).forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			claim_component(button.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-qorm5v");
			add_location(h1, file, 79, 0, 1875);
			add_location(br, file, 80, 29, 1919);
			attr_dev(h3, "class", "svelte-qorm5v");
			add_location(h3, file, 80, 0, 1890);
			attr_dev(div0, "id", "leftTitle");
			add_location(div0, file, 78, 0, 1854);
			add_location(h2, file, 83, 21, 1976);
			attr_dev(span, "class", "txt-rotate svelte-qorm5v");
			attr_dev(span, "data-period", "500");
			attr_dev(span, "data-rotate", "[ \"trustless\", \"robust\", \"distributed\"]");
			add_location(span, file, 83, 47, 2002);
			attr_dev(div1, "id", "rightTitle");
			add_location(div1, file, 83, 0, 1955);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div0, anchor);
			append_hydration_dev(div0, h1);
			append_hydration_dev(h1, t0);
			append_hydration_dev(div0, t1);
			append_hydration_dev(div0, h3);
			append_hydration_dev(h3, t2);
			append_hydration_dev(h3, br);
			append_hydration_dev(h3, t3);
			insert_hydration_dev(target, t4, anchor);
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, h2);
			append_hydration_dev(h2, t5);
			append_hydration_dev(div1, span);
			insert_hydration_dev(target, t6, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t6);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Routes', slots, []);

	onMount(async () => {
		var TxtRotate = function (el, toRotate, period) {
			this.toRotate = toRotate;
			this.el = el;
			this.loopNum = 0;
			this.period = parseInt(period, 10) || 2000;
			this.txt = '';
			this.tick();
			this.isDeleting = false;
		};

		TxtRotate.prototype.tick = function () {
			var i = this.loopNum % this.toRotate.length;
			var fullTxt = this.toRotate[i];

			if (this.isDeleting) {
				this.txt = fullTxt.substring(0, this.txt.length - 1);
			} else {
				this.txt = fullTxt.substring(0, this.txt.length + 1);
			}

			this.el.innerHTML = '<span class="wrap">' + this.txt + '</span>';
			var that = this;
			var delta = 300 - Math.random() * 100;

			if (this.isDeleting) {
				delta /= 2;
			}

			if (!this.isDeleting && this.txt === fullTxt) {
				delta = this.period;
				this.isDeleting = true;
			} else if (this.isDeleting && this.txt === '') {
				this.isDeleting = false;
				this.loopNum++;
				delta = 500;
			}

			setTimeout(
				function () {
					that.tick();
				},
				delta
			);
		};

		window.onload = function () {
			var elements = document.getElementsByClassName('txt-rotate');

			for (var i = 0; i < elements.length; i++) {
				var toRotate = elements[i].getAttribute('data-rotate');
				var period = elements[i].getAttribute('data-period');

				if (toRotate) {
					new TxtRotate(elements[i], JSON.parse(toRotate), period);
				}
			}

			// INJECT CSS
			var css = document.createElement("style");

			css.type = "text/css";
			css.innerHTML = ".txt-rotate > .wrap { border-right: 0.16em solid rgb(255, 0, 212) }";
			document.body.appendChild(css);
		};
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Button: Button$1, onMount });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export { Routes as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
